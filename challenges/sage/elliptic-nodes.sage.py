

# This file was *autogenerated* from the file elliptic-nodes.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2582928974243465355371953056699793745022552378548418288211138499777818633265 = Integer(2582928974243465355371953056699793745022552378548418288211138499777818633265); _sage_const_2421683573446497972507172385881793260176370025964652384676141384239699096612 = Integer(2421683573446497972507172385881793260176370025964652384676141384239699096612); _sage_const_8742397231329873984594235438374590234800923467289367269837473862487362482 = Integer(8742397231329873984594235438374590234800923467289367269837473862487362482); _sage_const_225987949353410341392975247044711665782695329311463646299187580326445253608 = Integer(225987949353410341392975247044711665782695329311463646299187580326445253608); _sage_const_4368590184733545720227961182704359358435747188309319510520316493183539079703 = Integer(4368590184733545720227961182704359358435747188309319510520316493183539079703); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_305179796174210822247618473361747316085422620437271958999235012896334193460 = Integer(305179796174210822247618473361747316085422620437271958999235012896334193460)
px = _sage_const_2582928974243465355371953056699793745022552378548418288211138499777818633265  #x1 
py = _sage_const_2421683573446497972507172385881793260176370025964652384676141384239699096612  #y1 
gx = _sage_const_8742397231329873984594235438374590234800923467289367269837473862487362482  # x2 
gy = _sage_const_225987949353410341392975247044711665782695329311463646299187580326445253608  # y2 
p = _sage_const_4368590184733545720227961182704359358435747188309319510520316493183539079703 


Zn = Integers(p) 
x1_sub_x2 = Zn(px - gx) 
x1_sub_x2_inv =  x1_sub_x2 **-_sage_const_1 

a = (((py**_sage_const_2  - gy**_sage_const_2 ) - (px**_sage_const_3  - gx**_sage_const_3 ))*x1_sub_x2_inv) %p
b = (py**_sage_const_2  - px**_sage_const_3  - a*px)%p

#E = EllipticCurve(GF(p), [a,b]) # will lead to error that we are trying to define a singular curve 

var('x y a_s b_s') 
curve_eq = x**_sage_const_3  + a_s*x + b_s - y**_sage_const_2   
dx = diff(curve_eq, x)
dy = diff(curve_eq, y)

#solution = solve([dx == 0, dy == 0], x, y)[0][0].rhs()
#print(solution) 
x_singular = mod((-pow(_sage_const_3 ,-_sage_const_1 ,p)*a)%p,p).sqrt()

P = GF(p)['x']; (x,) = P._first_ngens(1)
f = x**_sage_const_3  + a*x + b 
P = (px, py) 
Q = (gx, gy) 

f_ = f.subs(x = x+x_singular) 
P_ = (P[_sage_const_0 ] - x_singular, P[_sage_const_1 ]) 
Q_ = (Q[_sage_const_0 ] - x_singular, Q[_sage_const_1 ])

#print(f_.factor())
r = _sage_const_305179796174210822247618473361747316085422620437271958999235012896334193460 
t = GF(p)(r).square_root() 

v = (P_[_sage_const_1 ] + t*P_[_sage_const_0 ])/(P_[_sage_const_1 ] - t*P_[_sage_const_0 ]) % p
u = (Q_[_sage_const_1 ] + t*Q_[_sage_const_0 ])/(Q_[_sage_const_1 ] - t*Q_[_sage_const_0 ]) % p

print(discrete_log(v,u)) 

