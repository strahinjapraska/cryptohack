p = 99061670249353652702595159229088680425828208953931838069069584252923270946291
a = 1 
b = 4
E = EllipticCurve(GF(p), [a,b]) 

G = E(43190960452218023575787899214023014938926631792651638044680168600989609069200,20971936269255296908588589778128791635639992476076894152303569022736123671173)
A = E.lift_x(87360200456784002948566700858113190957688355783112995047798140117594305287669)
B = E.lift_x(6082896373499126624029343293750138460137531774473450341235217699497602895121)

a = discrete_log(A,G, operation = '+', bounds = (0,2**64)) 
ss = (a*B).xy()[0]

import hashlib 
from Crypto.Cipher import AES 
from Crypto.Util.Padding import unpad

flag =  {'iv': 'ceb34a8c174d77136455971f08641cc5', 'encrypted_flag': 'b503bf04df71cfbd3f464aec2083e9b79c825803a4d4a43697889ad29eb75453'}

ss = 5174653704092763360796229829845257205073345937937186983729251250965927323427
sha1 = hashlib.sha1() 
sha1.update(str(ss).encode('ascii'))
key = sha1.digest()[:16]

iv = bytes.fromhex(flag['iv'])
c = bytes.fromhex(flag['encrypted_flag'])

cipher = AES.new(key, AES.MODE_CBC, iv)
unpad(cipher.decrypt(c),16) 
